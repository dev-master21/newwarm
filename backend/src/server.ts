// backend/src/server.ts
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import path from 'path';
import { config } from './config/config';
import routes from './routes';
import db from './config/database';
import { thumbnailService } from './services/thumbnail.service';
import { startThumbnailJob } from './jobs/thumbnail.job';

const app = express();

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ origin'–æ–≤
const allowedOrigins = [
  'http://localhost:3000',
  'http://localhost:5173',
  'https://warm.novaestate.company',
  'http://warm.novaestate.company',
  config.frontendUrl
];

app.use(cors({
  origin: (origin, callback) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç Postman –∏–ª–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
    if (!origin) {
      return callback(null, true);
    }
    
    if (allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      console.warn(`CORS blocked origin: ${origin}`);
      callback(null, true); // –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    }
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin'],
  exposedHeaders: ['Content-Range', 'X-Content-Range'],
  maxAge: 600 // 10 –º–∏–Ω—É—Ç
}));

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
app.use(helmet({
  crossOriginResourcePolicy: { policy: "cross-origin" },
  contentSecurityPolicy: false
}));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
if (config.env === 'development') {
  app.use(morgan('dev'));
}

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫)
app.use('/uploads', express.static(path.join(__dirname, '../uploads')));

// API —Ä–æ—É—Ç—ã
app.use(config.apiPrefix, routes);

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    environment: config.env,
    database: 'connected'
  });
});

// 404 Handler
app.use((req, res) => {
  res.status(404).json({
    success: false,
    message: 'Route not found'
  });
});

// Error Handler
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error('Error:', err);
  
  res.status(err.status || 500).json({
    success: false,
    message: err.message || 'Internal server error',
    ...(config.env === 'development' && { stack: err.stack })
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = config.port;

app.listen(PORT, async () => {
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üöÄ WARM+ Backend Server Started   ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  Environment: ${config.env.padEnd(23)}‚ïë
‚ïë  Port:        ${PORT.toString().padEnd(23)}‚ïë
‚ïë  API:         ${config.apiPrefix.padEnd(23)}‚ïë
‚ïë  Frontend:    ${config.frontendUrl.padEnd(23)}‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
  `);

  // –ó–∞–ø—É—Å–∫ cron job –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ thumbnails
  console.log('\nüìÖ Starting thumbnail services...');
  startThumbnailJob();

  // –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ thumbnails –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ (–≤ —Ñ–æ–Ω–µ)
  console.log('üñºÔ∏è  Starting initial thumbnail synchronization...\n');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
  thumbnailService.fullSync()
    .then((stats) => {
      console.log('\n‚úÖ Initial thumbnail synchronization completed on startup!');
    })
    .catch((error) => {
      console.error('\n‚ùå Error during initial thumbnail synchronization:', error);
    });
});

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('\n‚ö†Ô∏è  SIGTERM received, closing server gracefully...');
  await db.close();
  console.log('‚úÖ Database connection closed');
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('\n‚ö†Ô∏è  SIGINT received, closing server gracefully...');
  await db.close();
  console.log('‚úÖ Database connection closed');
  process.exit(0);
});

export default app;