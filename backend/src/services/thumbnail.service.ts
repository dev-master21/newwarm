// backend/src/services/thumbnail.service.ts
import sharp from 'sharp'
import fs from 'fs/promises'
import path from 'path'
import db from '../config/database' // –ò–∑–º–µ–Ω–µ–Ω–æ: default import

interface ThumbnailStats {
  processed: number
  skipped: number
  errors: number
  duration: number
}

class ThumbnailService {
  private readonly THUMBNAIL_WIDTH = 400 // –®–∏—Ä–∏–Ω–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã
  private readonly THUMBNAIL_QUALITY = 80 // –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
  private readonly PHOTO_DIRS = [
    'uploads/properties/photos',
    'uploads/properties/floor-plans'
  ]

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è thumbnail –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async generateThumbnail(imagePath: string): Promise<boolean> {
    try {
      const ext = path.extname(imagePath)
      const nameWithoutExt = imagePath.slice(0, -ext.length)
      const thumbnailPath = `${nameWithoutExt}_thumb${ext}`

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ thumbnail
      try {
        await fs.access(thumbnailPath)
        console.log(`‚è≠Ô∏è  Thumbnail already exists: ${thumbnailPath}`)
        return false // –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      } catch {
        // Thumbnail –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      try {
        await fs.access(imagePath)
      } catch {
        console.error(`‚ùå Source image not found: ${imagePath}`)
        return false
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º thumbnail
      await sharp(imagePath)
        .resize(this.THUMBNAIL_WIDTH, null, {
          fit: 'inside', // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
          withoutEnlargement: true // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        })
        .jpeg({ quality: this.THUMBNAIL_QUALITY, progressive: true })
        .png({ quality: this.THUMBNAIL_QUALITY, compressionLevel: 9 })
        .webp({ quality: this.THUMBNAIL_QUALITY })
        .toFile(thumbnailPath)

      console.log(`‚úÖ Thumbnail generated: ${thumbnailPath}`)
      return true
    } catch (error) {
      console.error(`‚ùå Error generating thumbnail for ${imagePath}:`, error)
      return false
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async getAllPhotosFromDatabase(): Promise<string[]> {
    try {
      const query = `
        SELECT DISTINCT photo_url 
        FROM property_photos 
        WHERE photo_url IS NOT NULL AND photo_url != ''
      `
      const photos: any[] = await db.query(query)
      return photos.map(p => p.photo_url)
    } catch (error) {
      console.error('‚ùå Error fetching photos from database:', error)
      return []
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  async getAllFilesFromDirectory(dir: string): Promise<string[]> {
    try {
      const fullPath = path.join(process.cwd(), dir)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      try {
        await fs.access(fullPath)
      } catch {
        console.log(`‚ö†Ô∏è  Directory not found: ${fullPath}`)
        return []
      }

      const files = await fs.readdir(fullPath)
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞–µ–º thumbnails)
      const imageFiles = files.filter(file => {
        const isImage = /\.(jpg|jpeg|png|webp)$/i.test(file)
        const isNotThumbnail = !file.includes('_thumb')
        return isImage && isNotThumbnail
      })

      return imageFiles.map(file => path.join(dir, file))
    } catch (error) {
      console.error(`‚ùå Error reading directory ${dir}:`, error)
      return []
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è thumbnails –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async generateThumbnailsFromDatabase(): Promise<ThumbnailStats> {
    const startTime = Date.now()
    const stats: ThumbnailStats = {
      processed: 0,
      skipped: 0,
      errors: 0,
      duration: 0
    }

    console.log('\nüîÑ Starting thumbnail generation from database...')

    try {
      const photoUrls = await this.getAllPhotosFromDatabase()
      console.log(`üìä Found ${photoUrls.length} photos in database`)

      for (const photoUrl of photoUrls) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –≤ –ø—É—Ç—å —Ñ–∞–π–ª–∞
        const filePath = photoUrl.startsWith('/') ? photoUrl.slice(1) : photoUrl

        try {
          const generated = await this.generateThumbnail(filePath)
          if (generated) {
            stats.processed++
          } else {
            stats.skipped++
          }
        } catch (error) {
          stats.errors++
          console.error(`‚ùå Error processing ${filePath}:`, error)
        }
      }
    } catch (error) {
      console.error('‚ùå Error in generateThumbnailsFromDatabase:', error)
    }

    stats.duration = Date.now() - startTime
    this.logStats(stats)
    return stats
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è thumbnails –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
   */
  async generateThumbnailsFromDirectories(): Promise<ThumbnailStats> {
    const startTime = Date.now()
    const stats: ThumbnailStats = {
      processed: 0,
      skipped: 0,
      errors: 0,
      duration: 0
    }

    console.log('\nüîÑ Starting thumbnail generation from directories...')

    for (const dir of this.PHOTO_DIRS) {
      console.log(`\nüìÅ Processing directory: ${dir}`)
      
      const files = await this.getAllFilesFromDirectory(dir)
      console.log(`üìä Found ${files.length} images in ${dir}`)

      for (const file of files) {
        try {
          const generated = await this.generateThumbnail(file)
          if (generated) {
            stats.processed++
          } else {
            stats.skipped++
          }
        } catch (error) {
          stats.errors++
          console.error(`‚ùå Error processing ${file}:`, error)
        }
      }
    }

    stats.duration = Date.now() - startTime
    this.logStats(stats)
    return stats
  }

  /**
   * –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
   */
  async fullSync(): Promise<ThumbnailStats> {
    console.log('\nüöÄ Starting FULL thumbnail synchronization...')
    return await this.generateThumbnailsFromDirectories()
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - —Ç–æ–ª—å–∫–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async quickSync(): Promise<ThumbnailStats> {
    console.log('\n‚ö° Starting QUICK thumbnail synchronization...')
    return await this.generateThumbnailsFromDatabase()
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è thumbnail –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  async generateForFile(photoUrl: string): Promise<boolean> {
    const filePath = photoUrl.startsWith('/') ? photoUrl.slice(1) : photoUrl
    return await this.generateThumbnail(filePath)
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private logStats(stats: ThumbnailStats): void {
    console.log('\nüìä Thumbnail Generation Statistics:')
    console.log(`   ‚úÖ Processed: ${stats.processed}`)
    console.log(`   ‚è≠Ô∏è  Skipped: ${stats.skipped}`)
    console.log(`   ‚ùå Errors: ${stats.errors}`)
    console.log(`   ‚è±Ô∏è  Duration: ${(stats.duration / 1000).toFixed(2)}s`)
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n')
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö thumbnails
   */
  async cleanupUnusedThumbnails(): Promise<number> {
    let deletedCount = 0
    console.log('\nüßπ Starting cleanup of unused thumbnails...')

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ photo_url –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const photoUrls = await this.getAllPhotosFromDatabase()
      const validFiles = new Set(photoUrls.map(url => {
        const filePath = url.startsWith('/') ? url.slice(1) : url
        return path.basename(filePath)
      }))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      for (const dir of this.PHOTO_DIRS) {
        const fullPath = path.join(process.cwd(), dir)
        
        try {
          const files = await fs.readdir(fullPath)
          
          // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ thumbnails
          const thumbnails = files.filter(file => file.includes('_thumb'))
          
          for (const thumbnail of thumbnails) {
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            const originalName = thumbnail.replace('_thumb', '')
            
            // –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - —É–¥–∞–ª—è–µ–º thumbnail
            if (!validFiles.has(originalName)) {
              const thumbnailPath = path.join(fullPath, thumbnail)
              await fs.unlink(thumbnailPath)
              console.log(`üóëÔ∏è  Deleted unused thumbnail: ${thumbnail}`)
              deletedCount++
            }
          }
        } catch (error) {
          console.error(`‚ùå Error cleaning directory ${dir}:`, error)
        }
      }

      console.log(`\n‚úÖ Cleanup complete. Deleted ${deletedCount} unused thumbnails.`)
    } catch (error) {
      console.error('‚ùå Error in cleanup:', error)
    }

    return deletedCount
  }
}

export const thumbnailService = new ThumbnailService()